prototype(NeosRulez.NodeSearch:Component.SearchResult) < prototype(Neos.Fusion:Component) {

    @context.searchTerm = ${request.arguments.s ? request.arguments.s : false}
    result = NeosRulez.NodeSearch:Class.NodeSearch {
        searchterm = ${searchTerm}
        currentNode = ${node}
    }
    length = ${this.result ? Array.length(this.result) : false}

    saveInDatabase = ${q(node).property('saveInDatabase')}

    renderer = afx`
        <NeosRulez.NodeSearch:Class.SaveInDatabase searchterm={searchTerm} saveInDatabase={props.saveInDatabase} searchCount={props.length} />
        <div class="nodesearch-result">
            <p @if.render={props.result}>{I18n.translate('NeosRulez.NodeSearch:NodeTypes.Component.SearchResult:content.searchresult.msg.1')} <strong>"{searchTerm}"</strong> {I18n.translate('NeosRulez.NodeSearch:NodeTypes.Component.SearchResult:content.searchresult.msg.2')} ({props.length}):</p>
            <Neos.Fusion:Loop @if.render={props.result} items={props.result} itemName="item">
                <div class="row">
                    <div class="col-12">
                        <p>
                            <Neos.Neos:NodeLink node={item.documentNode}>
                                {item.documentNode.properties.title}
                            </Neos.Neos:NodeLink>
                        </p>
                        <p>{item.findString}</p>
                    </div>
                </div>
            </Neos.Fusion:Loop>
            <p @if.render={!props.result}>{I18n.translate('NeosRulez.NodeSearch:NodeTypes.Component.SearchResult:content.searchresult.msg.3')}</p>
        </div>
    `

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.s}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
        }
    }
}
